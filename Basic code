#define trigger1 5 // Trigger Pin
#define echo1 6 // Echo Pin

enum ledStates {ON, OFF, WAVE, INCREASING}; // Here we make nicknames for the different states our program supports.
enum ledStates ledState; // We define 'ledState' as type ledStates'
enum ledStates previousLedState = ledState;

int brightness = 0; // our main variable for setting the brightness of the LEDconst int trigPin = 9;
const int echoPin = 8;
const int ledPin = 13;
const int trigPin = 9;
float velocity = 1.0; // the speed at which we change the brightness.
int p = 0; // use to keep track how often we plot
int plotFrequency = 2; // how often we plot, every Nth time.
unsigned long startMillis;  //some global variables available anywhere in the program
unsigned long currentMillis;


const int numReadings = 20; // higher is smoother but less responsive

int readings[numReadings];      // the readings from the analog input
int readIndex = 0;              // the index of the current reading
int total = 0;                  // the running total
int average = 0;                // the average
long duration;
float distance;
float distanceA;
float distanceB;
int ldr;

int inRange = 45; //Wide Range First sight of Target
int TargetRange = 12; //Minimal Parking Range to Target
const int NoiseReject = 50; //Percentage of reading closeness for rejection filter
long lastDuration, unfiltered, Sonar, RawSonar;
const unsigned int maxDuration = 19475; // around 200 cm, the sensor gets flaky at greater distances.
const long speed_of_sound = 29.1;    // speed of sound microseconds per centimeter
float interval;

void setup() {
  // put your setup code here, to run once:
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT); 
  pinMode(ledPin, OUTPUT); // set ledPin as an output.
  Serial.begin(9600); 
  /*for (int thisReading = 0; thisReading < numReadings; thisReading++) {
    readings[thisReading] = 0;
  }*/
}




  

void SonarSensor(int trigPin, int echoPin) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    unfiltered = (duration / 2) / speed_of_sound; //Stores preliminary reading to compare
    if(duration <= 5) duration = ((inRange + 1) * speed_of_sound * 2); 
    //Rejects very low readings, kicks readout to outside detection range
    if(lastDuration == 0) lastDuration = duration;
    //Compensation parameters for intial start-up
    if(duration > (1 * maxDuration)) duration = maxDuration;
    //Rejects any reading defined to be out of sensor capacity (>1000)
    //Sets the fault reading to the last known "successful" reading
    if(duration > maxDuration) duration = maxDuration;  
    //Caps Reading output at defined maximum distance (~200)
    if((duration - lastDuration) < ((-1) * (NoiseReject / 100) * lastDuration)){
      distance = (duration / 2) / speed_of_sound; //Noise filter for low range drops
    }
    distance = (duration / 2) / speed_of_sound;
    lastDuration = duration; //Stores "successful" reading for filter compensation
  }
  


void loop() {
  SonarSensor(trigPin, echoPin);
    
  ////// PRINT FOR PROOF CHECKING //////
  Serial.print("Filtered Sonar = ");
  Serial.print(distance);
  Serial.print(" cm, ");
  Serial.print("Unfiltered Sonar = ");
  Serial.print(unfiltered);
  Serial.print(" cm");
  Serial.println();
////// END OF PRINT-CHECK //////

 
  currentMillis = millis(); //store the current time since the program started
  if(distance > 300){
   threeHundred();
    }
    else if(distance < 300 && distance >=150){
    threeToOneFifty();
    } 
    else if(distance < 150 && distance > 0){
     oneFiftyToZero();
    }
    else {
      digitalWrite(ledPin, ledState);
      ledState = LOW;
    }
//delay(20); //Delay 50ms before next reading.
}



void threeHundred(){
   brightness = 0;
    digitalWrite(ledPin, brightness);
}

void threeToOneFifty(){
    distanceA = distance;
     analogWrite(ledPin, brightness);
     brightness = map(distanceA, 300, 150, 0, 255);
      
      if (distanceA != distance){
        distanceA = distance;
        }
}

void oneFiftyToZero(){
   interval = map(distance, 300, 0, 250, 10);
      
   
    // save the last time you blinked the LED
   
 switch (ledState){
         case ON:
           digitalWrite(ledPin, brightness);
           brightness = 255;
            if (currentMillis - startMillis >= interval){
            changeState(OFF);
           }
           break;

         case OFF:
           digitalWrite(ledPin, brightness);
           brightness = 0;
           if (currentMillis - startMillis >= interval){
            changeState(ON);
           }
           break;
      } 

    digitalWrite(ledPin, ledState);
    
}

void changeState(ledStates newState){
    // call to change state, will keep track of time since last state
    startMillis = millis();
    ledState = newState;
  }

